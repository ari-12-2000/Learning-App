
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.10.0
 * Query Engine version: aee10d5a411e4360c6d3445ce4810ca65adbf3e8
 */
Prisma.prismaVersion = {
  client: "6.10.0",
  engine: "aee10d5a411e4360c6d3445ce4810ca65adbf3e8"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.AdminScalarFieldEnum = {
  id: 'id',
  first_name: 'first_name',
  last_name: 'last_name',
  email: 'email',
  password: 'password',
  adminType: 'adminType',
  organization: 'organization',
  bio: 'bio',
  profile_image: 'profile_image',
  contactPhone: 'contactPhone',
  website: 'website',
  isVerified: 'isVerified',
  isActive: 'isActive',
  lastLogin: 'lastLogin',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.LearnerScalarFieldEnum = {
  id: 'id',
  first_name: 'first_name',
  last_name: 'last_name',
  gender: 'gender',
  dob: 'dob',
  email: 'email',
  phone: 'phone',
  communicationEmail: 'communicationEmail',
  password: 'password',
  profile_image: 'profile_image',
  organisation: 'organisation',
  designation: 'designation',
  department: 'department',
  location: 'location',
  hierarchy_level: 'hierarchy_level',
  totalPoints: 'totalPoints',
  isActive: 'isActive',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  isVerified: 'isVerified',
  lastLogin: 'lastLogin',
  createdBy: 'createdBy',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  uniqueHash: 'uniqueHash',
  status: 'status',
  extraConfig: 'extraConfig',
  metaData: 'metaData',
  role: 'role'
};

exports.Prisma.ProgramScalarFieldEnum = {
  id: 'id',
  authorId: 'authorId',
  title: 'title',
  description: 'description',
  category: 'category',
  instructor: 'instructor',
  instructorAvatar: 'instructorAvatar',
  image: 'image',
  rating: 'rating',
  level: 'level',
  price: 'price',
  type: 'type',
  totalTimeLimit: 'totalTimeLimit',
  status: 'status',
  uniqueHash: 'uniqueHash',
  startDate: 'startDate',
  endDate: 'endDate',
  surveyStartDate: 'surveyStartDate',
  surveyEndDate: 'surveyEndDate',
  maxParticipants: 'maxParticipants',
  passingScore: 'passingScore',
  studySettings: 'studySettings',
  clientId: 'clientId',
  packageId: 'packageId',
  isActive: 'isActive',
  isDeleted: 'isDeleted',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ModuleScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  prerequisiteModuleId: 'prerequisiteModuleId',
  status: 'status',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EnrollmentScalarFieldEnum = {
  id: 'id',
  learnerId: 'learnerId',
  programId: 'programId',
  enrolledAt: 'enrolledAt'
};

exports.Prisma.ProgramModuleScalarFieldEnum = {
  programId: 'programId',
  moduleId: 'moduleId',
  position: 'position'
};

exports.Prisma.TopicScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  prerequisiteTopicId: 'prerequisiteTopicId',
  status: 'status',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ModuleTopicScalarFieldEnum = {
  moduleId: 'moduleId',
  topicId: 'topicId',
  position: 'position'
};

exports.Prisma.ResourceScalarFieldEnum = {
  id: 'id',
  resourceType: 'resourceType',
  url: 'url',
  title: 'title',
  description: 'description',
  status: 'status',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt'
};

exports.Prisma.TopicResourceScalarFieldEnum = {
  topicId: 'topicId',
  resourceId: 'resourceId',
  position: 'position'
};

exports.Prisma.QuestionPoolScalarFieldEnum = {
  id: 'id',
  authorId: 'authorId',
  questionText: 'questionText',
  questionType: 'questionType',
  metadata: 'metadata',
  explanation: 'explanation',
  timeLimitSec: 'timeLimitSec',
  points: 'points',
  option1: 'option1',
  option2: 'option2',
  option3: 'option3',
  option4: 'option4',
  option5: 'option5',
  option6: 'option6',
  answer: 'answer',
  createdAt: 'createdAt'
};

exports.Prisma.QuizPaperScalarFieldEnum = {
  id: 'id',
  authorId: 'authorId',
  title: 'title',
  createdAt: 'createdAt'
};

exports.Prisma.QuizPaperQuestionScalarFieldEnum = {
  quizPaperId: 'quizPaperId',
  questionId: 'questionId',
  position: 'position',
  timeMode: 'timeMode',
  timeLimit: 'timeLimit'
};

exports.Prisma.QuizAssignmentScalarFieldEnum = {
  id: 'id',
  quizPaperId: 'quizPaperId',
  programId: 'programId',
  startAt: 'startAt',
  endAt: 'endAt',
  uniqueLinkToken: 'uniqueLinkToken',
  timeMode: 'timeMode',
  wrongAnsMode: 'wrongAnsMode',
  resultMode: 'resultMode',
  totalTimeLimit: 'totalTimeLimit',
  passingScore: 'passingScore',
  enabled: 'enabled',
  isDeleted: 'isDeleted',
  deletedAt: 'deletedAt',
  createdAt: 'createdAt'
};

exports.Prisma.QuizAttemptScalarFieldEnum = {
  id: 'id',
  assignmentId: 'assignmentId',
  learnerId: 'learnerId',
  startedAt: 'startedAt',
  submittedAt: 'submittedAt',
  totalTimeSpent: 'totalTimeSpent',
  score: 'score',
  passed: 'passed',
  status: 'status',
  createdAt: 'createdAt'
};

exports.Prisma.QuestionAttemptScalarFieldEnum = {
  attemptId: 'attemptId',
  questionId: 'questionId',
  answerText: 'answerText',
  isCorrect: 'isCorrect',
  timeTakenSec: 'timeTakenSec'
};

exports.Prisma.ResourceViewScalarFieldEnum = {
  learnerId: 'learnerId',
  resourceId: 'resourceId',
  viewedAt: 'viewedAt'
};

exports.Prisma.MeasureProgressScalarFieldEnum = {
  learnerId: 'learnerId',
  topicId: 'topicId',
  completedAt: 'completedAt',
  progressType: 'progressType',
  status: 'status',
  programId: 'programId',
  moduleId: 'moduleId',
  resourceId: 'resourceId'
};

exports.Prisma.LeaderboardScalarFieldEnum = {
  programId: 'programId',
  learnerId: 'learnerId',
  totalScore: 'totalScore',
  lastAttemptAt: 'lastAttemptAt'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};
exports.AdminType = exports.$Enums.AdminType = {
  SystemAdmin: 'SystemAdmin',
  PartnerAdmin: 'PartnerAdmin'
};

exports.ProgramType = exports.$Enums.ProgramType = {
  self_paced: 'self_paced',
  tutor_paced: 'tutor_paced',
  workshop: 'workshop',
  webinar: 'webinar'
};

exports.ResourceType = exports.$Enums.ResourceType = {
  video: 'video',
  document: 'document',
  image: 'image',
  other: 'other'
};

exports.QuestionType = exports.$Enums.QuestionType = {
  mcq_single: 'mcq_single',
  true_false: 'true_false',
  fill_blank: 'fill_blank',
  slider: 'slider',
  text: 'text'
};

exports.TimeMode = exports.$Enums.TimeMode = {
  none: 'none',
  qns: 'qns',
  exam: 'exam'
};

exports.WrongAnswerMode = exports.$Enums.WrongAnswerMode = {
  none: 'none',
  retry: 'retry',
  correct_ans: 'correct_ans'
};

exports.ResultMode = exports.$Enums.ResultMode = {
  none: 'none',
  exam_ends: 'exam_ends',
  later: 'later'
};

exports.Prisma.ModelName = {
  Admin: 'Admin',
  Learner: 'Learner',
  Program: 'Program',
  Module: 'Module',
  Enrollment: 'Enrollment',
  ProgramModule: 'ProgramModule',
  Topic: 'Topic',
  ModuleTopic: 'ModuleTopic',
  Resource: 'Resource',
  TopicResource: 'TopicResource',
  QuestionPool: 'QuestionPool',
  QuizPaper: 'QuizPaper',
  QuizPaperQuestion: 'QuizPaperQuestion',
  QuizAssignment: 'QuizAssignment',
  QuizAttempt: 'QuizAttempt',
  QuestionAttempt: 'QuestionAttempt',
  ResourceView: 'ResourceView',
  MeasureProgress: 'MeasureProgress',
  Leaderboard: 'Leaderboard'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
